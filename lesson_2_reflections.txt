What happens when you initialize a repository? Why do you need to do it?
	a new hidden directory called .git is created in order to store the version
	history of a future repository. No initial commit of a current directory is 
	made.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
    staging area contains files from the working directory which are intended for 
    the next next commit, thus enforcing finer level of comit granularity control.

How can you use the staging area to make sure you have one commit per logical
change?
	I will add to staging area just the file which I want to include in the commit

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	When I want to experiment with some new feature or functionality in the project 
	while keeping the master branch intact. Whne wanting to make a DEMO version for
	a presentation purposes adapting some features just for this event or making a
	translation of a project on a language on which a presentation is going to be 
	performed.

How do the diagrams help you visualize the branch structure?
    Diagrams are pictures and beeing pictures they represent chemas which show 
    previous and next commits in sequences - from initial commit to every 
    existing branch leaf commit

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
    All the commits from both branches sorted according to its timestamp of creation.
    Because it is necessary to represent and reach all the commits under one branch label 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
	Good thing about automatic merging is spareing time otherwise inevitably spent into
	manually doing this merge technique. Cons would be lack of control and insight during 
	merging process.